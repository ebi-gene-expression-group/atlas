{"version":3,"sources":["webpack:///./atlas_bundles/baseline-expression/index.js","webpack:///./atlas_bundles/baseline-expression/src/baselineRenderer.jsx","webpack:///./atlas_bundles/baseline-expression/src/BaselineRouter.jsx","webpack:///./atlas_bundles/baseline-expression/src/facets-tree/BaselineFacetsTree.jsx","webpack:///./atlas_bundles/baseline-expression/src/facets-tree/Facet.jsx","webpack:///./atlas_bundles/baseline-expression/src/facets-tree/FacetItem.jsx","webpack:///./atlas_bundles/baseline-expression/src/BaselineHeatmaps.jsx","webpack:///./atlas_bundles/baseline-expression/src/BaselineHeatmapWidget.jsx","webpack:///./atlas_bundles/baseline-expression/src/urlManager.js"],"names":["render","atlasUrl","target","facetsTreeData","geneQuery","conditionQuery","species","ReactDOM","document","getElementById","UrlManager","require","BaselineRouter","props","newQuerySelect","parseBaselineUrlParameter","newShowAnatomograms","Object","keys","length","forEach","factorToPreselect","find","factor","name","toLowerCase","_addElementToObjectOfArrays","baselinePush","state","_transformPropsFacetsObjectToArray","querySelect","showAnatomograms","setChecked","_setChecked","bind","toggleAnatomograms","_toggleAnatomograms","window","addEventListener","setState","organismPartInQuerySelect","_organismPartInQuerySelect","heatmaps","_querySelectToHeatmaps","factorName","checked","JSON","parse","stringify","newFacetsTreeData","facet","facetName","facetItems","_removeElementFromObjectOfArrays","obj","arrayName","element","push","splice","indexOf","some","facetItem","map","value","includes","React","Component","propTypes","PropTypes","string","isRequired","object","BaselineFacetsTree","facets","disableAnatomogramsCheckbox","arrayOf","shape","bool","func","capitalizeFirstLetter","str","charAt","toUpperCase","slice","Facet","facetItemName","facetItemChecked","FacetItem","BaselineHeatmaps","heatmap","_hasMoreThanOneSpecies","uniqueSpecies","Set","add","size","BaselineHeatmapWidget","showHeatmapLabel","gene","condition","source","showAnatomogram","Url","QueryString","exports","pushQueryIntoBrowserHistory","replace","currentUrlObject","location","toString","newUrlQueryParams","query","bs","newUrlObject","protocol","host","hash","pathname","history","replaceState","format","pushState","getQuerySelectFromLocation","currentURL","differentialSelectParam"],"mappings":"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","file":"expressionAtlasBaselineExpression.bundle.js","sourcesContent":["import render from './src/baselineRenderer.jsx'\nexport {render}\n\n\n\n// WEBPACK FOOTER //\n// ./atlas_bundles/baseline-expression/index.js","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport BaselineRouter from './BaselineRouter.jsx'\n\nexport default function (\n    { atlasUrl = `https://www.ebi.ac.uk/gxa`, target = `gxaBaselineTab`, facetsTreeData,\n      geneQuery, conditionQuery, species }) {\n\n    ReactDOM.render(\n        <BaselineRouter atlasUrl={atlasUrl}\n                        facetsTreeData={facetsTreeData}\n                        geneQuery={geneQuery}\n                        conditionQuery={conditionQuery}\n                        species={species}\n        />,\n        document.getElementById(target)\n    )\n}\n\n\n\n// WEBPACK FOOTER //\n// ./atlas_bundles/baseline-expression/src/baselineRenderer.jsx","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport BaselineFacetsTree from './facets-tree/BaselineFacetsTree.jsx'\nimport BaselineHeatmaps from './BaselineHeatmaps.jsx'\nconst UrlManager = require('./urlManager.js')\n\nclass BaselineRouter extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        const newQuerySelect = UrlManager.parseBaselineUrlParameter()\n        let newShowAnatomograms = false\n\n        if (Object.keys(newQuerySelect).length === 0) {\n            Object.keys(this.props.facetsTreeData).forEach(species => {\n                const factorToPreselect =\n                    this.props.facetsTreeData[species].find(factor => factor.name.toLowerCase() === 'organism_part')\n                if (factorToPreselect) {\n                    this._addElementToObjectOfArrays(newQuerySelect, species, factorToPreselect.name)\n                    newShowAnatomograms = true\n                } else if (this.props.facetsTreeData[species].length) {\n                    this._addElementToObjectOfArrays(\n                        newQuerySelect, species, this.props.facetsTreeData[species][0].name)\n                }\n            })\n        }\n\n        UrlManager.baselinePush(newQuerySelect, true)\n\n        this.state = {\n            facetsTreeData: this._transformPropsFacetsObjectToArray(newQuerySelect),\n            querySelect: newQuerySelect,\n            showAnatomograms: newShowAnatomograms\n        }\n\n        this.setChecked = this._setChecked.bind(this)\n        this.toggleAnatomograms = this._toggleAnatomograms.bind(this)\n    }\n\n    componentDidMount () {\n        // TODO Consider using https://github.com/reactjs/react-router\n        window.addEventListener(\n            'popstate',\n            () => {\n                const newQuerySelect = UrlManager.parseBaselineUrlParameter()\n                this.setState({\n                    querySelect: newQuerySelect,\n                    facetsTreeData: this._transformPropsFacetsObjectToArray(newQuerySelect)\n                })\n            },\n            false)\n    }\n\n    render () {\n        const organismPartInQuerySelect = this._organismPartInQuerySelect()\n        const heatmaps = this._querySelectToHeatmaps()\n\n        return (\n            <div className=\"row expanded\">\n                <div className=\"small-3 large-2 columns\">\n                    <BaselineFacetsTree\n                        facets = {this.state.facetsTreeData}\n                        setChecked = {this.setChecked}\n                        showAnatomograms = {this.state.showAnatomograms}\n                        toggleAnatomograms = {this.toggleAnatomograms}\n                        disableAnatomogramsCheckbox = {!organismPartInQuerySelect} />\n                </div>\n                <div className=\"small-9 large-10 columns\">\n                    <BaselineHeatmaps\n                        atlasUrl = {this.props.atlasUrl}\n                        geneQuery = {this.props.geneQuery}\n                        conditionQuery = {this.props.conditionQuery}\n                        heatmaps = {heatmaps}\n                        showAnatomograms = {this.state.showAnatomograms} />\n                </div>\n            </div>\n        )\n    }\n\n    _setChecked (species, factorName, checked) {\n        const newQuerySelect = JSON.parse(JSON.stringify(this.state.querySelect))\n        const newFacetsTreeData = JSON.parse(JSON.stringify(this.state.facetsTreeData))\n\n        if (checked) {\n            this._addElementToObjectOfArrays(newQuerySelect, species, factorName)\n            newFacetsTreeData.find(facet => facet.facetName === species).facetItems\n                .find(factor => factor.name === factorName).checked = true\n        } else {\n            this._removeElementFromObjectOfArrays(newQuerySelect, species, factorName)\n            newFacetsTreeData.find(facet => facet.facetName === species).facetItems\n                .find(factor => factor.name === factorName).checked = false\n        }\n\n        UrlManager.baselinePush(newQuerySelect, false)\n        this.setState({\n            facetsTreeData: newFacetsTreeData,\n            querySelect: newQuerySelect\n        })\n    }\n\n    _addElementToObjectOfArrays (obj, arrayName, element) {\n        if (!obj[arrayName]) {\n            obj[arrayName] = []\n        }\n        obj[arrayName].push(element)\n    }\n\n    _removeElementFromObjectOfArrays (obj, arrayName, element) {\n        delete obj[arrayName].splice(obj[arrayName].indexOf(element), 1)\n        if (obj[arrayName].length === 0) {\n            delete obj[arrayName]\n        }\n    }\n\n    _toggleAnatomograms() {\n        let newShowAnatomograms = !this.state.showAnatomograms\n\n        this.setState({\n            showAnatomograms: newShowAnatomograms\n        })\n    }\n\n    _organismPartInQuerySelect(querySelect = this.state.querySelect) {\n        return Object.keys(querySelect)\n               .some(species => querySelect[species].some(facetItem => facetItem.toLowerCase() === 'organism_part'))\n    }\n\n    // Also syncs this.state.facetsTreeData with querySelect\n    _transformPropsFacetsObjectToArray (querySelect) {\n        return Object.keys(this.props.facetsTreeData).map(facetName => {\n            return {\n                facetName: facetName,\n                facetItems: this.props.facetsTreeData[facetName].map(facetItem => {\n                    return {\n                        name: facetItem.name,\n                        value: facetItem.value,\n                        checked: querySelect[facetName] ? querySelect[facetName].includes(facetItem.name) : false\n                    }\n                })\n            }\n        })\n    }\n\n    _querySelectToHeatmaps () {\n        /*\n         querySelect={ \"Homo sapiens\": [ \"CELL_LINE\", \"ORGANISM_PART\" ] }\n         ->\n         [ { \"species\": \"Homo sapiens\",\n             \"factor\": { \"name\": \"ORGANISM_PART\", \"value\": \"Organism part\"}\n           },\n           { \"species\": \"Homo sapiens\",\n             \"factor\": { \"name\": \"CELL_LINE\", \"value\": \"Cell line\" }\n         ]\n         */\n        let heatmaps = []\n\n        // We iterate over facetsTreeData instead of over querySelect to get heatmaps in the same order as the facets\n        // tree\n        this.state.facetsTreeData.forEach(facet => {\n            facet.facetItems.forEach(facetItem => {\n                if (this.state.querySelect[facet.facetName] &&\n                    this.state.querySelect[facet.facetName].includes(facetItem.name)) {\n                    heatmaps.push({\n                        species: facet.facetName,\n                        factor: facetItem\n                    })\n                }\n            })\n        })\n\n        return heatmaps\n    }\n}\n\nBaselineRouter.propTypes = {\n    atlasUrl: PropTypes.string.isRequired,\n    /*\n    {\n        \"homo sapiens\": [{ \"name\": \"ORGANISM_PART\", \"value\": \"Organism part\"},\n        { \"name\": \"CELL_LINE\", \"value\": \"Cell line\"}],\n        \"macaca mulatta\": [{ \"name\": \"ORGANISM_PART\", \"value\": \"Organism part\"}]\n    }\n     */\n    facetsTreeData: PropTypes.object.isRequired,\n    geneQuery: PropTypes.string.isRequired,\n    conditionQuery: PropTypes.string.isRequired,\n    species: PropTypes.string.isRequired\n}\n\nexport default BaselineRouter\n\n\n\n// WEBPACK FOOTER //\n// ./atlas_bundles/baseline-expression/src/BaselineRouter.jsx","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Facet from './Facet.jsx'\n\nconst BaselineFacetsTree = props => {\n    const facets = props.facets.map(facet =>\n        <Facet\n            key = {facet.facetName}\n            facetName = {facet.facetName}\n            facetItems = {facet.facetItems}\n            setChecked = {props.setChecked}\n        />\n    )\n\n    return (\n        <div>\n            <input type=\"checkbox\" checked={props.showAnatomograms} onChange={props.toggleAnatomograms} disabled={props.disableAnatomogramsCheckbox}/>\n            <label className={props.disableAnatomogramsCheckbox ? \"gxaDisabledCheckbox\" : \"\"}>Show anatomograms</label>\n\n            <h4>Filter your results</h4>\n            {facets}\n        </div>\n    )\n}\n\nBaselineFacetsTree.propTypes = {\n    /*\n     [\n         {\n             facetName : \"homo sapiens\",\n             facetItems: [\n                 {\"name\": \"CELL_LINE\", \"value\": \"Cell line\", \"checked\": true},\n                 {\"name\": \"ORGANISM_PART\", \"value\": \"Tissue\", \"checked: true}\n             ]\n         },\n         {\n             facetName : \"mus musculus\",\n             facetItems\": [\n                 {\"name\": \"CELL_LINE\", \"value\": \"Cell line\", \"checked\": false},\n                 {\"name\": \"ORGANISM_PART\", \"value\": \"Tissue\", \"checked\": true}\n             ]\n         }\n     ]\n     */\n    facets: PropTypes.arrayOf(PropTypes.shape({\n        facetName: PropTypes.string.isRequired,\n        facetItems: PropTypes.arrayOf(PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            value: PropTypes.string.isRequired,\n            checked: PropTypes.bool.isRequired\n        })).isRequired\n    })).isRequired,\n    setChecked: PropTypes.func.isRequired,\n    showAnatomograms: PropTypes.bool.isRequired,\n    toggleAnatomograms: PropTypes.func.isRequired,\n    disableAnatomogramsCheckbox: PropTypes.bool.isRequired\n}\n\nexport default BaselineFacetsTree\n\n\n\n// WEBPACK FOOTER //\n// ./atlas_bundles/baseline-expression/src/facets-tree/BaselineFacetsTree.jsx","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport FacetItem from './FacetItem.jsx'\n\nconst capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1).toLowerCase()\n\nconst Facet = props => {\n    const facetItems = props.facetItems.map(facetItem =>\n        <FacetItem\n            key={`${props.facetName}_${facetItem.name}`}\n            name={facetItem.name}\n            value={facetItem.value}\n            checked={facetItem.checked}\n            setChecked={(facetItemName, facetItemChecked) => { props.setChecked(props.facetName, facetItemName, facetItemChecked) }}\n        />\n    )\n\n    return (\n        <div className=\"margin-top-large\">\n            <h5>{capitalizeFirstLetter(props.facetName)}</h5>\n            {facetItems}\n        </div>\n    )\n}\n\nFacet.propTypes = {\n    facetName: PropTypes.string.isRequired,\n    facetItems: PropTypes.arrayOf(PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        value: PropTypes.string.isRequired,\n        checked: PropTypes.bool.isRequired\n    })).isRequired,\n    setChecked: PropTypes.func.isRequired\n}\n\nexport default Facet\n\n\n// WEBPACK FOOTER //\n// ./atlas_bundles/baseline-expression/src/facets-tree/Facet.jsx","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst FacetItem = props =>\n    <div>\n        <input type=\"checkbox\" checked={props.checked} onChange={() => props.setChecked(props.name, !props.checked)} />\n        <label>{props.value}</label>\n    </div>\n\nFacetItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    checked: PropTypes.bool.isRequired,\n    setChecked: PropTypes.func.isRequired\n};\n\nexport default FacetItem\n\n\n// WEBPACK FOOTER //\n// ./atlas_bundles/baseline-expression/src/facets-tree/FacetItem.jsx","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport BaselineHeatmapWidget from './BaselineHeatmapWidget.jsx'\n\nclass BaselineHeatmaps extends React.Component {\n\n    render() {\n        return (\n            <div>\n                {this.props.heatmaps.map(heatmap =>\n                    <BaselineHeatmapWidget\n                        key = {`${heatmap.species}_${heatmap.factor.name}`}\n                        showAnatomogram = {this.props.showAnatomograms}\n                        showHeatmapLabel = {this._hasMoreThanOneSpecies()}\n                        species = {heatmap.species}\n                        factor = {heatmap.factor}\n                        atlasUrl = {this.props.atlasUrl}\n                        geneQuery = {this.props.geneQuery}\n                        conditionQuery = {this.props.conditionQuery} />\n                )}\n            </div>\n        );\n    }\n\n    _hasMoreThanOneSpecies () {\n        const uniqueSpecies = new Set()\n        this.props.heatmaps.forEach(heatmap => { uniqueSpecies.add(heatmap.species) })\n        return uniqueSpecies.size > 1\n    }\n}\n\nBaselineHeatmaps.propTypes = {\n    atlasUrl: PropTypes.string.isRequired,\n    geneQuery: PropTypes.string.isRequired,\n    conditionQuery: PropTypes.string,\n    /*\n     [{\"species\":\"Homo sapiens\", \"factor\":\"CELL_LINE\"}, {\"species\":\"Mus musculus\", \"factor\":\"ORGANISM_PART\"}]\n     */\n    showAnatomograms: PropTypes.bool.isRequired,\n    heatmaps: PropTypes.arrayOf(PropTypes.shape({\n        species: PropTypes.string.isRequired,\n        factor: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            value: PropTypes.string.isRequired\n        })\n    })).isRequired\n};\n\nexport default BaselineHeatmaps;\n\n\n\n// WEBPACK FOOTER //\n// ./atlas_bundles/baseline-expression/src/BaselineHeatmaps.jsx","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport ExpressionAtlasHeatmap from 'expression-atlas-heatmap-highcharts'\n\nconst capitalizeFirstLetter = (str) => str.charAt(0).toUpperCase() + str.slice(1).toLowerCase()\n\nconst BaselineHeatmapWidget = (props) =>\n  <div className=\"row column expanded margin-top-large margin-bottom-xlarge\">\n      <h5>{(props.showHeatmapLabel ? `${capitalizeFirstLetter(props.species)} — ` : '') + props.factor.value}</h5>\n      <ExpressionAtlasHeatmap atlasUrl={props.atlasUrl}\n                              query={{\n                                  gene: props.geneQuery,\n                                  condition: props.conditionQuery,\n                                  species: props.species,\n                                  source: props.factor.name\n                              }}\n                              isWidget={false}\n                              showAnatomogram={props.showAnatomogram}\n      />\n  </div>\n\n\nBaselineHeatmapWidget.propTypes = {\n    atlasUrl: PropTypes.string.isRequired,\n    geneQuery: PropTypes.string.isRequired,\n    conditionQuery: PropTypes.string.isRequired,\n    species: PropTypes.string.isRequired,\n    factor: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        value: PropTypes.string.isRequired\n    }).isRequired,\n    showAnatomogram: PropTypes.bool.isRequired,\n    showHeatmapLabel: PropTypes.bool.isRequired\n}\n\nexport default BaselineHeatmapWidget\n\n\n\n// WEBPACK FOOTER //\n// ./atlas_bundles/baseline-expression/src/BaselineHeatmapWidget.jsx","const Url = require('url');\nconst QueryString = require('querystring');\n\n/**\n * Stringify the `query` object, assign it to the `bs` search field in the URL and store it in the History\n * @param {object} querySelect\n * @param {boolean} replace - use `replaceState` instead of `pushState`\n */\nexports.baselinePush = function pushQueryIntoBrowserHistory(querySelect, replace) {\n    let currentUrlObject = Url.parse(window.location.toString());\n\n    let newUrlQueryParams = QueryString.parse(currentUrlObject.query);\n    newUrlQueryParams.bs = JSON.stringify(querySelect);\n\n    let newUrlObject = {\n        protocol: currentUrlObject.protocol,\n        host: currentUrlObject.host,\n        hash: currentUrlObject.hash,\n        pathname: currentUrlObject.pathname,\n        query: newUrlQueryParams\n    };\n\n    if (replace) {\n        history.replaceState(null, '', Url.format(newUrlObject));\n    } else {\n        history.pushState(null, '', Url.format(newUrlObject));\n    }\n};\n\nexports.parseBaselineUrlParameter = function getQuerySelectFromLocation(location = window.location) {\n    let currentURL = Url.parse(location.toString());\n    let differentialSelectParam = QueryString.parse(currentURL.query).bs;\n    return differentialSelectParam ? JSON.parse(differentialSelectParam) : {};\n};\n\n\n// WEBPACK FOOTER //\n// ./atlas_bundles/baseline-expression/src/urlManager.js"],"sourceRoot":""}